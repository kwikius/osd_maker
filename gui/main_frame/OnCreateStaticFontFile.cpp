
#include <ctime>
#include <cstring>
#include <fstream>

#include <quan/fs/strip_file_extension.hpp>
#include <quan/fs/get_basename.hpp>
#include <quan/gx/wxwidgets/from_wxString.hpp>
#include <quan/gx/wxwidgets/to_wxString.hpp>
#include <quan/uav/osd/detail/writable_bitmap.hpp>

#include "../../document.hpp"
#include "../../osd_bmp_app.hpp"
#include "../panel.hpp"
#include "../main_frame.hpp"
#include <wx/choicdlg.h>

using quan::gx::wxwidgets::from_wxString;
using quan::gx::wxwidgets::to_wxString;

void main_frame::OnCreateStaticFontFile(wxCommandEvent & event)
{
   wxArrayString choices = wxGetApp().get_panel()->get_font_names();
   
   wxMultiChoiceDialog dlg{
      this
      ,wxT("Choose fonts")
      ,wxT("Fonts to C++ sources/headers")
      ,choices
   };

   wxString output_cpp_dir = wxGetApp().get_config()->Read(wxT("/BitmapFont/OutputCppDir"),wxT(""));
   wxString output_cpp_basename = wxGetApp().get_config()->Read(wxT("/Fonts/OutputCppFile"),wxT("fonts.cpp"));

   if (dlg.ShowModal() == wxID_OK){

       wxFileDialog fd {wxGetApp().get_main_frame(),
         wxT ("Save OSD C++ Font source/header files"),
         output_cpp_dir,                    // default dir
         output_cpp_basename,                    // default file
         wxT ("C++ source (*.cpp)|*.cpp"), // wildcard
         wxFD_SAVE | wxFD_OVERWRITE_PROMPT
      };
      if (fd.ShowModal() == wxID_CANCEL) {
         return ;
      }

      std::string const cpp_filename = from_wxString<char>(fd.GetPath());
      std::string const basename_cpp = quan::fs::get_basename (cpp_filename);
      std::string const no_ext_basename = quan::fs::strip_file_extension(basename_cpp);
      std::string const cpp_file_dir = cpp_filename.substr(0,cpp_filename.rfind('/'));
     
      wxGetApp().get_config()->Write(wxT("/BitmapFont/OutputCppDir"),to_wxString(cpp_file_dir));
      wxGetApp().get_config()->Write(wxT("/Fonts/OutputCppFile"),to_wxString(basename_cpp));

      // check result ok
      std::ofstream out (cpp_filename);

      out << "\n//Generated by OSDMaker for the Quantracker Air OSD\n";
      out << "//https://github.com/kwikius/quantracker\n";
      out << "//https://github.com/kwikius/osd_maker\n";
      out << "#include <quan/uav/osd/api.hpp>\n";
      out << "#include <quan/uav/osd/basic_bitmap.hpp>\n";
      out << "#include <quan/uav/osd/basic_font.hpp>\n\n";
      out << "namespace {\n\n";

      wxArrayInt result = dlg.GetSelections();
      for ( size_t i = 0; i < result.GetCount();++i){
         std::string fnt_name = from_wxString<char>(choices[result[i]]);
         // get the font of that name
         typedef quan::uav::osd::dynamic::font dynamic_font;
         dynamic_font* fnt 
            = wxGetApp().get_document()->get_font(fnt_name);
         if ( fnt ){
            db_font const * dbf = dynamic_cast<db_font const *>(fnt);
            if ( dbf){
               dbf->output_header( fnt_name + "_type", fnt_name,out);
            }
         }
      } 

      out << "\n constexpr quan::uav::osd::font_ptr font_array[] =\n";
      out << "   {\n";
      for ( size_t i = 0; i < result.GetCount();++i){
         std::string font_name = from_wxString<char>(choices[result[i]]);
         out << "    ";
         if ( i != 0){
            out << ",";
         }
         out << "&font_" << font_name  <<'\n';
      }
      out << "   };\n} // namespace\n\n";
      out << "quan::uav::osd::font_ptr\n";
      out << "quan::uav::osd::get_font(uint32_t id)\n";
      out << "{\n";
      out << "   constexpr uint32_t size = sizeof(font_array)/sizeof(quan::uav::osd::font_ptr);\n";
      out << "   if ( id < size){\n";
      out << "      return font_array[id];\n";
      out << "   }else{\n";
      out << "      return nullptr;\n";
      out << "   }\n";
      out << "}\n";

      out.close();

      wxString output_hpp_dir      = wxGetApp().get_config()->Read(wxT("/BitmapFont/OutputHppDir"),wxT(""));
      wxString output_hpp_basename = wxGetApp().get_config()->Read(wxT("/Fonts/OutputHppFile"),wxT(""));

      if (output_hpp_dir == wxT("")){
         output_hpp_dir = output_cpp_dir;
      }

      if ( output_hpp_basename == wxT("")){
         output_hpp_basename = to_wxString(no_ext_basename + ".hpp");
      }

      wxFileDialog fd1 {
         wxGetApp().get_main_frame(),
         wxT ("Save Font C++ Header file"),
         output_hpp_dir,    // default dir
         output_hpp_basename,   // default file
         wxT ("C++ header (*.hpp)|*.hpp"), // wildcard
         wxFD_SAVE | wxFD_OVERWRITE_PROMPT
      };

      if (fd1.ShowModal() == wxID_CANCEL) {
         //output warning that ids may be invalid if not doen together
         return ;
      }

      std::string const hpp_filename = from_wxString<char>(fd1.GetPath());
      std::string const basename_hpp = quan::fs::get_basename (hpp_filename);
      std::string const no_ext_hpp_basename = quan::fs::strip_file_extension(basename_hpp);
      std::string const hpp_file_dir = hpp_filename.substr(0,cpp_filename.rfind('/'));

      output_hpp_dir = to_wxString(hpp_file_dir);
      output_hpp_basename = to_wxString(basename_hpp);
      
      std::ofstream out1 (hpp_filename);

      std::string ubase_name;
      for (auto c: no_ext_hpp_basename){
         char ch1 = ::toupper(c);
         if ( isspace(ch1)){
            ch1 = '_';
         }
         ubase_name += ch1 ;
      }
   
      time_t timer;
      time(&timer);

      out1 << "#ifndef QUANTRACKER_USER_FONT_" << ubase_name << "_" << timer <<  "_HPP_INCLUDED\n";
      out1 << "#define QUANTRACKER_USER_FONT_" << ubase_name <<  "_" << timer <<  "_HPP_INCLUDED\n\n";

      out1 << "\n//Generated by OSDMaker for the Quantracker Air OSD\n";
      out1 << "//https://github.com/kwikius/quantracker\n";
      out1 << "//https://github.com/kwikius/osd_maker\n";
      out1 << "#include <quan/uav/osd/basic_font.hpp>\n\n";
      out1 <<  "   struct FontID{\n";

      for ( size_t i = 0; i < result.GetCount();++i){
         std::string fnt_name = from_wxString<char>(choices[result[i]]);
         out1 << "      static constexpr uint32_t " << fnt_name << " = " << i << ";\n";
      }
      out1 << "};\n";
      out1  << "\n";
      out1 << "#endif // QUANTRACKER_USER_FONT_" << ubase_name << "_" << timer <<  "_HPP_INCLUDED\n";

      wxGetApp().get_config()->Write(wxT("/BitmapFont/OutputHppDir"),output_hpp_dir);
      wxGetApp().get_config()->Write(wxT("/Fonts/OutputHppFile"),output_hpp_basename);
     
   }
}
