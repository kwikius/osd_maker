


#include <quan/gx/wxwidgets/from_wxString.hpp>
#include <quan/gx/wxwidgets/to_wxString.hpp>
#include <quan/uav/osd/detail/writable_bitmap.hpp>
#include <quan/fs/strip_file_extension.hpp>
#include <quan/fs/get_basename.hpp>
#include <fstream>
#include "../../document.hpp"
#include "../../osd_bmp_app.hpp"
#include "../panel.hpp"
#include "../main_frame.hpp"
#include <wx/choicdlg.h>

using quan::gx::wxwidgets::from_wxString;
using quan::gx::wxwidgets::to_wxString;

void main_frame::OnCreateStaticBitmapFile(wxCommandEvent & event)
{
   wxArrayString choices = wxGetApp().get_panel()->get_bitmap_names();
   
   wxMultiChoiceDialog dlg{
      this
      ,wxT("Choose bitmaps")
      ,wxT("Bitmaps to C+ sources/headers")
      ,choices
   };
   if (dlg.ShowModal() == wxID_OK){
     
       wxFileDialog fd {wxGetApp().get_main_frame(),
         wxT ("Save Bitmap sources"),
         wxT (""),                    // default dir
         wxT (""),                    // default file
         wxT ("C++ source (*.cpp)|*.cpp"), // wildcard
         wxFD_SAVE | wxFD_OVERWRITE_PROMPT
      };
      if (fd.ShowModal() == wxID_CANCEL) {
         return ;
      }

      std::string src_filename = from_wxString<char>(fd.GetPath());
      wxArrayInt result = dlg.GetSelections();
      // check result ok
      std::ofstream out (src_filename);

      out << "\n//Generated by OSDMaker for the Quantracker Air OSD\n";
      out << "//https://github.com/kwikius/quantracker\n";
      out << "//https://github.com/kwikius/osd_maker\n\n";
      out << "#include <quan/uav/osd/api.hpp>\n";
      out << "#include <quan/uav/osd/basic_bitmap.hpp>\n\n";
      out << "namespace {\n\n";

      // check out ok
      for ( size_t i = 0; i < result.GetCount();++i){
         wxString bmp_name = choices[result[i]];
         // get the bitmap of that name
         typedef quan::uav::osd::dynamic::bitmap dynamic_bitmap;
         dynamic_bitmap* bmp = wxGetApp().get_document()->get_bitmap(
            from_wxString<char>(bmp_name)
         );
         if ( bmp ){
            std::string bmp_name1 = from_wxString<char>(bmp_name);
            bmp->output_header( bmp_name1 + "_type", bmp_name1,out);
         }
      } 

      out << " constexpr quan::uav::osd::bitmap_ptr bitmap_array[] =\n";
      out << "   {\n";
      for ( size_t i = 0; i < result.GetCount();++i){
         std::string bmp_name = from_wxString<char>(choices[result[i]]);
         out << "    ";
         if ( i != 0){
            out << ",";
         }
         out << "&" << bmp_name  <<'\n';
      }
      out << "   };\n} // namespace\n\n";
      out << "quan::uav::osd::bitmap_ptr\n";
      out << "quan::uav::osd::get_bitmap(uint32_t id)\n";
      out << "{\n";
      out << "constexpr uint32_t size = sizeof(bitmap_array)/sizeof(quan::uav::osd::bitmap_ptr);\n";
      out << "  if ( id < size){\n";
      out << "     return bitmap_array[id];\n";
      out << "  }else{\n";
      out << "     return nullptr;\n";
      out << "  }\n";
      out << "}\n";

      out.close();
      // --- source done

      std::string no_ext_filename = quan::fs::strip_file_extension(src_filename);
      
      std::ofstream out1 (no_ext_filename + ".hpp");



       
      std::string basename = quan::fs::get_basename (no_ext_filename);

      std::string ubase_name;
      for (auto c: basename){
         char ch1 = ::toupper(c);
         if ( isspace(ch1)){
            ch1 = '_';
         }
         ubase_name += ch1 ;
      }
      time_t timer;
      time(&timer);
   
      // TODO create a unique include guard
      out1 << "#ifndef QUANTRACKER_USER_BITMAP_" << ubase_name << "_" << timer << "_HPP_INCLUDED\n";
      out1 << "#define QUANTRACKER_USER_BITMAP_" << ubase_name << "_" << timer << "_HPP_INCLUDED\n";
      out1 << "//Generated by OSDMaker for the Quantracker Air OSD\n\n";
      out1 << "//https://github.com/kwikius/quantracker\n";
      out1 << "//https://github.com/kwikius/osd_maker\n";
      out1 << "#include <quan/uav/osd/basic_bitmap.hpp>\n\n";
      out1 <<  "   struct BitmapID{\n";

      for ( size_t i = 0; i < result.GetCount();++i){
         std::string bmp_name = from_wxString<char>(choices[result[i]]);
         out1 << "      static constexpr uint32_t " << bmp_name << " = " << i << ";\n";
      }
      out1 << "   };\n";
      out1 << "\n";
      out1 << "#endif // QUANTRACKER_USER_BITMAP_" << ubase_name << "_" << timer <<  "_HPP_INCLUDED\n";;
   }
}



